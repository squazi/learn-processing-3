
/*
 *  This class represents an individual particle within a particle system
 *
 *  It is a parameterized class in which different parameters control the behaviour of the class
 */

class Particle
{
   /*
    * These are the parameters that control the behaviour and appearance of the particle
    */ 
   PVector position;
   PVector velocity;
   int size = 1;
   
   // This is an additional variable which tracks whether the particle 
   // should be kept in existance or it should be removed
   boolean alive;
  
    // the constructor doesn't set the parameters as there would be too many
    // they should be set separately on creation 
    Particle()
    {
      alive = true;
    }
    
    // This updates the position of the particle 
    // and manages its behaviour
    void update(float deltaTime)
    {
      // update the position based on the velocity
      position.add(PVector.mult(velocity, deltaTime));
      
      // add gravity (which is a global variable, not a class variable
      velocity.y += gravity*deltaTime;
      
      // if the particle goes off screen, kill it
      if(position.x < 0 || position.x > width)
        alive = false;
      if(position.y < 0 || position.y > height)
        alive = false;
      
    }
    
    // this draws the graphical appearance of the particle
    // you can change this method to make it look different
    void draw()
    {
      if(!alive) 
        return;
      
      // use push style to apply a particular visual style to 
      // the particle and only the particle
      // (it works like pushMatrix but for style commands
      // like stroke and fill)
      pushStyle();
      ellipseMode(CENTER);
      
      // translate the particle to its position and draw it
      pushMatrix();
      translate(position.x, position.y);
      ellipse(0, 0, size, size);
      popMatrix();
      
      popStyle();
    }
  
}
